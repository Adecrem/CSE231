###########################################################

    #  Computer Project #10
    #algorithm
    #import statements
    #distribute cards function
    #   checks for round
    #   appends accordingly
    #get_card_index
    #   finds index of card
    #get_matching_cards
    #   if there is boolean
    #numeric_card
    #checks if rank is less than 10 so not a face
    #remove_card
    #   removes card if in list
    #get_sum_matching_card
    #   given
    #jack_play
    #   if jack inputed
    #   append accordingly check if all jacks
    #   if not 
    #   append 
    #seven_diamonds
    #   if seven diamonds inputed
    #   append accordingly
    #   if all not 
    #   append accordingly
    #play
    #   checks rank
    #   appends according to rank
    #   if king check matching and append
    #   if numeric check sum, matching and finally append
    #main
    #   deals cards
    #   calls appropriate function
    #   checks card numbers
    ###########################################################
from cards import Card
from cards import Deck
from itertools import zip_longest,chain,combinations #for displaying the table and sum

def distribute_cards(deck,p1_cards,p2_cards,t_cards,round1):
    if round1 == True:#if it is round 1
        for i in range(4):
            p1_cards.append(deck.deal())
        for i in range(4):
            p2_cards.append(deck.deal())
        for i in range(4):
            t_cards.append(deck.deal())
        
	#continue using the for i in range(4) for each list if the round is true
    else: #meaning that it isn't round1
        for i in range(4):
            p1_cards.append(deck.deal())
        for i in range(4):
            p2_cards.append(deck.deal())
		#append list
	#continue using the for i in range(4) for each list if the round is true
             

def get_card_index(card,cards_list):
    if card in cards_list:#checks card in card list
        for i in range(10):#list of 10
            index = cards_list.index(card)#checks index
        return index#returns indx
    else:
        return None

def get_matching_cards(card,t_cards):
    matching_crd = []#creates list
    for c in t_cards:#card in table
        if Card.equal_value(card,c) == True:#if there is an equal value
            matching_crd.append(c)#append
    return matching_crd#return the matching cards

def numeric_card(card):
    if card.rank() <= 10:#checks if face
        return True#if it is return True
    else:
        return False#if it is return False

def remove_cards(cards_list,cards):
    for crd in cards_list:#card in card list
        for crd in cards:#in cards
            if crd in cards_list:
                cards_list.remove(crd)#remove card
    return cards_list#return without card

def get_sum_matching_cards(card,t_cards):
    '''this function return a list of cards that add up to card rank,
    if the card is Jack, Queen or king, the function returns empty list'''

    matching_sum_list=[]
    numeric_list=[]

    # make a list of the numeric cards on the table
    if len(t_cards)>1:
        for i in t_cards:
            if numeric_card(i):
                numeric_list.append(i)

    # collect pairs of numeric cards that sum to card
    if len(numeric_list) > 1:
        # collect combinations of length 2, i.e. pairs, of cards
        # only if the ranks of the pair sum to card's rank
        matching_sum_pair = [seq for seq in combinations(numeric_list, 2) \
                         if seq[0].rank() + seq[1].rank() == card.rank()]
        # combine the list of lists into one list
        matching_sum_list = list(chain(*matching_sum_pair))
    
    return matching_sum_list


def sum_rank(cards): #optional
    '''Put your docstring here''' 

    pass

def jack_play(card,player,pile,basra,t_cards):
    all_jacks = True#calls boolean
    if not t_cards:#if list is empty
        t_cards.append(card)#append
        player.remove(card)#remove
    else:#if list is not empty
        player.remove(card)#remove 
        for c in t_cards:#card in list
            if Card.rank(c) != 11:#if not jack
                all_jacks = False#not all jacks
            pile.append(c)#append
            #t_cards.remove(c)
        t_cards.clear()#clear
        if all_jacks == True:#if all jacks
            basra.append(card)
        else:
            pile.append(card)
            
        
        
    

def seven_diamond_play(card,player,pile,basra,t_cards):
    #numbs = numeric_card(card)
    all_svn = True#set boolean
    sum_of_cards = 0#defines
    for c in t_cards:#if card in table
        sum_of_cards += Card.rank(c)#adds sum of cards
    if not t_cards:#if not in table cards
        player.remove(card)
        t_cards.append(card)
    else:
        player.remove(card)
        
        for c in t_cards:#card in table
            if Card.rank(c) != (7,2):#if seven of diamond
                all_svn = False
            pile.append(c)
            #t_cards.remove(c)
        #t_cards.clear()
        remove_cards(t_cards, t_cards)#removes
        remove_cards(t_cards, t_cards)
        remove_cards(t_cards, t_cards)
        #print(sum_of_cards)
        if all_svn == True or sum_of_cards <= 10:#if all seven or sum
            basra.append(card)
        else:
            pile.append(card)
            

def play(card,player,pile,basra,t_cards):
    matcher = get_matching_cards(card,t_cards)#calls matching
    summer = get_sum_matching_cards(card,t_cards)#calls sum
    #remover = remove_cards(card,player)
    #player.remove(card)
    if not t_cards:#if list empty
        t_cards.append(card)
        player.remove(card)
        
    elif Card.rank(card) == 11 :#if jack
        jack_play(card,player,pile,basra,t_cards)
        
    elif Card.rank(card) == (7) and Card.suit(card) == 2:#if jack
        seven_diamond_play(card,player,pile,basra,t_cards)
        
    
    elif Card.rank(card) > 11:#if face
        if not t_cards:#empty
            player.remove(card)
            t_cards.append(card)
        else:
            player.remove(card)
            
                
        if matcher:#if matches
            for match in matcher:
                pile.append(match)
                
            remove_cards(t_cards, matcher)#remove
            
            if not t_cards:#if empty
                
                basra.append(card)
            else:
                pile.append(card)
        else:   
            t_cards.append(card)
            
                
        
        
    elif Card.rank(card) < 11 and Card.rank(card) > 0:#numeric
        if not t_cards:#empty
            player.remove(card)
            t_cards.append(card)
        else:
            player.remove(card)
            
                
        if  matcher:#matching
            for match in matcher:
                pile.append(match)
            if summer:#sum
                for summe in summer:
                    pile.append(summe)
            remove_cards(t_cards, summer)        
            remove_cards(t_cards, matcher)
            
            if not t_cards:#empty list
                
                basra.append(card)
            else:
                pile.append(card)
        else:   
            t_cards.append(card)
            
        
        
    

def compute_score(p1_pile,p2_pile,basra_1,basra_2):
    p1_score = 0#count
    p2_score = 0#count
    if len(p1_pile) + len(basra_1) >= 27:#checks for how many cards
        p1_score += 30
    if len(p2_pile) + len(basra_2) >= 27:
        p2_score += 30
    for i in basra_1:#checks for basra
        if Card.rank(i) == 12 or Card.rank(i) == 13:#if king queen
            p1_score += 20
        if Card.rank(i) == 11:#if jack
            p1_score += 30
        if Card.rank(i) > 0 and Card.rank(i) < 11:#if numeric
            p1_score += 10
    for i in basra_2:
        if Card.rank(i) == 12 or Card.rank(i) == 13:
            p2_score += 20
        if Card.rank(i) == 11:
            p2_score += 30
        if Card.rank(i) > 0 and Card.rank(i) < 11:
            p2_score += 10
    score = (p1_score,p2_score)
    return score
    
        
def display_table(t_cards,p1_cards,p2_cards): 
    '''Display the game table.'''
    print("\n"+36*"=")
    print("{:^36s}".format('Player1'))
    print(9*" ", end = ' ')
    for card in p1_cards:
        print("{:>3s}".format(str(card)),end = ' ')
    print()
    print(9*" " + " {0[0]:>3d} {0[1]:>3d} {0[2]:>3d} {0[3]:>3d}".format(range(4)))
    table = zip_longest(*[iter(t_cards)]*4,fillvalue=0)
    hline = "\n" + 36*"-" 
    str_ = hline + '\n '
    for row in table:
        str_ += 9*" "
        for c in range(0, 4):
            str_ += ("{:>3s}".format(str(row[c])) \
                     if row[c] is not 0 else ' ') +' '
        str_ += '\n'
    str_ += hline + '\n '
    print (str_)

    print(9*" " + " {0[0]:>3d} {0[1]:>3d} {0[2]:>3d} {0[3]:>3d}".format(range(4)))
    print(9*" ", end = ' ')
    for card in p2_cards:
        print("{:>3s}".format(str(card)),end = ' ')
    print()
    print("{:^36s}".format('Player2'))
    print(36*"=")
            
    
def main():
    '''main function'''
    RULES = '''
    Basra Card Game:
        This game belongs to a category of card games called “fishing cards games”. 
        Each player in turn matches a card from their hand with one (or more) of those 
        lying face-up on the table and then takes them. 
        If the card which the player played out does not match one of the existing cards, 
        it stays on the table.
    To win, you have to collect more points.'''
    
    print(RULES)
    

    p1_cards = [] # card in hands player1
    p2_cards = [] #card in hands player2
    t_cards = []   # card on the floor
    p1_pile = [] # for player1
    p2_pile = [] # for player2
    basra_1 = []
    basra_2 = []
    deck = Deck()
    card_count = 50
    answer = input("Would you like to play? y/Y or n/N? ")

    while answer !='n':#if you want to play
        print("---------Start The game--------")
        print("Dealing the cards, 4 cards for each player, 4 cards on the table")
        print('Cards left: ',card_count-10)
        distribute_cards(deck,p1_cards,p2_cards,t_cards,round1=True)#distribute
        card_count -= 12#effect card
        display_table(t_cards,p1_cards,p2_cards)#display
        picker = input("Player 1 turn: -> ")#pick player
        
        while picker != 'q': #as long as not quit
            while int(picker) < 0 or int(picker) > (len(p1_cards)-1) :#finds range of play
                if picker == 'q':#quit
                    break
                print('Please enter a valid card index, 0 <= index <= {}'.format(len(p1_cards)-1))#shows valid range
                picker = input("Player 1 turn: -> ")#player
                if picker == 'q':#quit
                    break
                if not p1_cards and not p2_cards:#if empty
                    p2_pile.append(t_cards)#append 
                    
                    print("\n------Start new round-----")
                    print("Dealing the cards, 4 cards for each player")
                    distribute_cards(deck,p1_cards,p2_cards,t_cards,round1=False)#distribute not first round
                    card_count -= 8#card count
                    display_table(t_cards,p1_cards,p2_cards)#display table
            #display_table(t_cards,p1_cards,p2_cards)
            if picker == 'q':
                break
            card1 = p1_cards[int(picker)] #makes pick an integer
            #deck.shuffle()
            
            #display_table(t_cards,p1_cards,p2_cards)
            play(card1,p1_cards,p1_pile,basra_1,t_cards)
            
            display_table(t_cards,p1_cards,p2_cards)
            
         #   if not p1_cards and not p2_cards:
          #      p2_pile.append(t_cards)
          #      print("\n------Start new round-----")
          #      print("Dealing the cards, 4 cards for each player")
          #      distribute_cards(deck,p1_cards,p2_cards,t_cards,round1=False)
            
            
            
          ###########PLAYER 2 CONTAINS THE SAME AS PLAYER 1 USE COMMENTS ACCORDINGLY#############################  
            
            
            
            picker = input("Player 2 turn: -> ")
         
            while int(picker) < 0 or int(picker) > (len(p2_cards) - 1) :
                if picker == 'q':
                    break
                print('Please enter a valid card index, 0 <= index <= {}'.format((len(p2_cards) - 1)))
                picker = input("Player 2 turn: -> ")
                if picker == 'q':
                    break
                if not p1_cards and not p2_cards:
                    p2_pile.append(t_cards)
                    
                    print("\n------Start new round-----")
                    print("Dealing the cards, 4 cards for each player")
                    distribute_cards(deck,p1_cards,p2_cards,t_cards,round1=False)
                    card_count -= 8
                    display_table(t_cards,p1_cards,p2_cards)
            #display_table(t_cards,p1_cards,p2_cards)
            if picker == 'q':
                break
            card2 = p2_cards[int(picker)]
            play(card2,p2_cards,p2_pile,basra_2,t_cards)
            display_table(t_cards,p1_cards,p2_cards)
            picker = input("Player 1 turn: -> ")
            
          #  if p1_cards == [] and p2_cards == []:
          #      p2
           #     print("\n------Start new round-----")
           #     print("Dealing the cards, 4 cards for each player")
           #     distribute_cards(deck,p1_cards,p2_cards,t_cards,round1=False)
           #     card_count -= 8
           #     display_table(t_cards,p1_cards,p2_cards)
           # if not p1_cards and not p2_cards:
           #     p2_pile.append(t_cards)
            #    print("\n------Start new round-----")
            #    print("Dealing the cards, 4 cards for each player")
             #   distribute_cards(deck,p1_cards,p2_cards,t_cards,round1=False)
            
            
        if picker == 'q':#quit
            break    
        answer = input("Would you like to play? y/Y or n/N? ")#want to play again
            
            
            
            
            
            
                
      
    print('Thanks for playing. See you again soon')#final message
#            

            
                                                        

# useful strings to match tests (put them in a loop to reprompt on bad input)
# print('Please enter a valid card index, 0 <= index <= {:d}'.format(len(p1_cards)-1))
# card_index = input("Player {:d} turn: -> ".format(turn))

# remember to clear the data structures before the next game
# deck.reset()
# p1_cards.clear() # card in hands player1
# p2_cards.clear() #card in hands player2
# t_cards.clear()   # card on the floor
# p1_pile.clear() # pile for player1
# p2_pile.clear() # pile for player2
# basra_1.clear() # basra for player1
# basra_2.clear() #basra for player2
        
#            answer = input("Would you like to play? y/Y or n/N?")
#        else:
#            print('Thanks for playing. See you again soon.')
#    
#    
      
# main function, the program's entry point
if __name__ == "__main__":
    main()
