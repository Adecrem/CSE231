##
## Class PetError -- complete
##

class PetError( ValueError ):
    
    pass

##
## Class Pet -- complete
##

class Pet( object ):
    
    def __init__( self, species=None, name="" ):
        if species is not None and species.lower() in ['dog','cat','horse','gerbil','hamster','ferret'] :
            self.species = species
            self.name = name    
        else:    
            raise PetError()
    def __str__( self ):
        result_str = "Species of {:s}, unnamed".format(self.species.title())
        return result_str
##
## Class Dog -- complete
##

class Dog( Pet ):

    def __init__( self, name=None, chases="Cats" ):
      
            Pet.__init__(self,"Dog", name)
            self.chases = chases
          
    def __str__( self ):
      
        if self.name is not None:
            return "Species of %s, named %s, chases %s" % (self.species,self.name,self.chases)
        else :
            return "Species of %s, unnamed, chases %s" % (self.species,self.chases)

##
##
## Class Cat -- complete
##

class Cat( Pet ):
    
    def __init__( self, name=None, hates="Dogs" ):
      
            Pet.__init__(self, "Cat" ,name)
            self.hates = hates
          
    def __str__( self ):
      
        if self.name is not None:
            return "Species of %s, named %s, hates %s" % (self.species,self.name,self.hates)
        else :
            return "Species of %s, unnamed, hates %s" % (self.species,self.hates)
